/*--------------------------------*- C++ -*----------------------------------*\
|       ______          _   __           ______                               |
|      / ____/  ___    / | / /          / ____/  ____   ____ _   ____ ___     |
|     / / __   / _ \  /  |/ /  ______  / /_     / __ \ / __ `/  / __ `__ \    |
|    / /_/ /  /  __/ / /|  /  /_____/ / __/    / /_/ // /_/ /  / / / / / /    |
|    \____/   \___/ /_/ |_/          /_/       \____/ \__,_/  /_/ /_/ /_/     |
|    Copyright (C) 2015 - 2022 EPFL                                           |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      neutronicsProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This is the madel used to solve neutronics. It can be:
// - diffusionNeutronics
// - SP3Neutronics
// - SNNeutronics
// - pointKinetics
// - adjointDiffusion
//
// adjointDiffusion has been developed only as an eigenvalue solver.
// The others can be used for transient calculations. However, the 
// SN transient solver has not been tested. In addition, it is
// currently not accelrated, thus extremely slow (it can require
// hundreds of iterations per time step).

model					diffusionNeutronics; 

eigenvalueNeutronics    true; // transient calculation if set to false

// ************************************************************************* //
