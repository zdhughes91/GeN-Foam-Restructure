/*--------------------------------*- C++ -*----------------------------------*\
|       ______          _   __           ______                               |
|      / ____/  ___    / | / /          / ____/  ____   ____ _   ____ ___     |
|     / / __   / _ \  /  |/ /  ______  / /_     / __ \ / __ `/  / __ `__ \    |
|    / /_/ /  /  __/ / /|  /  /_____/ / __/    / /_/ // /_/ /  / / / / / /    |
|    \____/   \___/ /_/ |_/          /_/       \____/ \__,_/  /_/ /_/ /_/     |
|    Copyright (C) 2015 - 2022 EPFL                                           |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// A detailed explanation of several options of this dictionary are provided
// in this same dictionary of the 1D_boiling tutorial. The present case is 
// single-phase

// ------------------------------------------------------------------------- //
// --- THERMAL-HYDRAULIC TYPE ---------------------------------------------- //
// ------------------------------------------------------------------------- //

thermalHydraulicsType    "onePhase";

// ------------------------------------------------------------------------- //
// --- STRUCTURES PROPERTIES ----------------------------------------------- //
// ------------------------------------------------------------------------- //

structureProperties
{    
    "diagrid:axialReflector:radialReflector:follower:controlRod"
    {
        volumeFraction      0.718520968;
        Dh                  0.00365; //hydraulic diameter

        passiveProperties // properties of the passive (non-power-producing)
              // structure. In this case, the metallic wrapper.
              // As a matter of fact one should include also 
              // the dummy pins. Not done here for simplcity.
        {
            volumetricArea  5;
            rhoCp           4.8e6;
            T               668;
        }
        
    }

    "innerCore"
    {
        volumeFraction      0.718520968;
        Dh                  0.00365;

        powerModel // power production model for the sub-scale structure
        {
            type                nuclearFuelPin;
            
            // The volumetricArea keyword is now deprecated for the
            // nuclearFuelPin and heatedPin powerModels, as it can be shown
            // that by averaging a cylindrical pin (or a bundle of pins) over
            // a volume of any shape, the interfacialArea and volumeFraction
            // of the resulting porous pin structure are not independent, yet
            // are tied by volumetricArea = 2*volumeFraction/outerPinRadius
            // volumetricArea      267.855;
            powerDensity        0;  //- fields on disk have priority, if they
                                    //  are not found, this value is used
            fuelInnerRadius     0.0012;
            fuelOuterRadius     0.004715;
            cladInnerRadius     0.004865;
            cladOuterRadius     0.005365;
            fuelMeshSize        30;
            cladMeshSize        5;
            fuelRho             10480;
            fuelCp              250;
            cladRho             7500;
            cladCp              500;
            gapH                3000;
            fuelK               3;
            cladK               20;
            fuelT               668;
            cladT               668;
        }

        passiveProperties // these are the properties of the metallic wrappers
        {
            volumetricArea  5;
            rhoCp           4.8e6;
            T               668;
        }
    }

    "outerCore"
    {
        volumeFraction      0.718520968;
        Dh                  0.00365;

        powerModel // power production model for the sub-scale structure
        {
            type                nuclearFuelPinTest;
            
            // The volumetricArea keyword is now deprecated for the
            // nuclearFuelPin and heatedPin powerModels, as it can be shown
            // that by averaging a cylindrical pin (or a bundle of pins) over
            // a volume of any shape, the interfacialArea and volumeFraction
            // of the resulting porous pin structure are not independent, yet
            // are tied by volumetricArea = 2*volumeFraction/outerPinRadius
            // volumetricArea      267.855;
            powerDensity        0;  //- fields on disk have priority, if they
                                    //  are not found, this value is used
            fuelInnerRadius     0.0012;
            fuelOuterRadius     0.004715;
            cladInnerRadius     0.004865;
            cladOuterRadius     0.005365;
            fuelMeshSize        30;
            cladMeshSize        5;
            fuelRho             10480;
            fuelCp              250;
            cladRho             7500;
            cladCp              500;
            gapH                3000;
            fuelK               3;
            cladK               20;
            fuelT               668;
            cladT               668;
        }

        passiveProperties // these are the properties of the metallic wrappers
        {
            volumetricArea  5;
            rhoCp           4.8e6;
            T               668;
        }
    }
}

// ------------------------------------------------------------------------- //
// --- REGIME MAP MODEL ---------------------------------------------------- //
// ------------------------------------------------------------------------- //

/*  List of all regime map models dictionaries, with arbitrary name (only one, 
    lamTurb in this case). There can be any number of regime maps. Current
    types are oneParameter and twoParameters. 

    The oneParameter type is a 1-D regime map.
    Here, the map name is lamTurb and it depends on the fluid Reynolds number.
    Mismatches in the regime bounds of adjacent regimes automatically create
    an interpolation region, wherein the interpolation type can be changed via
    the interpolationMode keyword, which currently offers either linear or
    quadratic interpolation. In the oneParameter map, the lowest bound of the
    "lowest" regime is extended to -inf and the upper bound of the "upmost"
    regime is extended to +inf

    The twoParameter type is a 2-D regime map.

    To use a regimeMap in a model, select the "byRegime" type for said model.
    All physicsModels support it. The name of the regime map to be used
    is specified via a regimeMap keyword. Then, the model for each regime is
    specfied in subDicts named like each corresponding regime in the regimeMap.
    To see an example of this, have a look at the heatTransferModel used for
    this case.
*/

regimeMapModels
{
    "lamTurb"
    {
        type                oneParameter;
        parameter           "Re";
        regimeBounds
        {
            "laminar"       (0      1000);  //- 0 is automatically extended
                                            //  to -inf
            "turbulent"     (2300   2301);  //- 2031 is automatically extended
                                            //  to +inf
        }
    }
}

// ------------------------------------------------------------------------- //
// --- REGIME PHYSICS FOR EACH REGIME -------------------------------------- //
// ------------------------------------------------------------------------- //

physicsModels
{
    dragModels
    {
        "diagrid:axialReflector:radialReflector:follower:controlRod:innerCore:outerCore"
        {
            type    ReynoldsPower;
            coeff   0.687;
            exp     -0.25;
        }
    }

    heatTransferModels
    {
        "diagrid:axialReflector:radialReflector:follower:controlRod:innerCore:outerCore"
        {
            type        byRegime;
            regimeMap   "lamTurb";
            
            //- List of subdicts specifying a heatTransferModel for each regime
            //  in the lamTurb regimeMap
            "laminar"
            {
                // Nu = const + coeff * Re^expRe * Pr^expPr
                type    NusseltReynoldsPrandtlPower; 
                const   4;
                coeff   0;
                expRe   0;
                expPr   0;
            }
            "turbulent"
            {
                type    NusseltReynoldsPrandtlPower;
                const   4.82;
                coeff   0.0185;
                expRe   0.827;
                expPr   0.827;
            }
        }
    }
}

// ------------------------------------------------------------------------- //
// --- MISCELLANEA --------------------------------------------------------- //
// ------------------------------------------------------------------------- //

pMin                    10000;
pRefCell                0;
pRefValue               100000;

// ************************************************************************* //
