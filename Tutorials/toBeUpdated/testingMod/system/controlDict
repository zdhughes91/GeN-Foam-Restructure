/*--------------------------------*- C++ -*----------------------------------*\
|       ______          _   __           ______                               |
|      / ____/  ___    / | / /          / ____/  ____   ____ _   ____ ___     |
|     / / __   / _ \  /  |/ /  ______  / /_     / __ \ / __ `/  / __ `__ \    |
|    / /_/ /  /  __/ / /|  /  /_____/ / __/    / /_/ // /_/ /  / / / / / /    |
|    \____/   \___/ /_/ |_/          /_/       \____/ \__,_/  /_/ /_/ /_/     |
|    Copyright (C) 2015 - 2022 EPFL                                           |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     GeN-Foam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         20;

deltaT           0.001;

writeControl    runTime;

writeInterval   1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

//- Physics to Solve

solveFluidMechanics true;

solveEnergy     true;

solveNeutronics true;

solveThermalMechanics false;

//- Global options

liquidFuel true;

//- Time step control options

adjustTimeStep      false;

maxDeltaT           1;

maxCo               1;

maxPowerVariation   0.025;

functions
{

   TCoreInlet
    {
        type            TBulk;
        libs            ( "libfieldFunctionObjects.so" );
        log             true;
        writeFields     true;
        region          "fluidRegion";
        regionType      faceZone;
        regionName      TcoreInlet;
        thermoName      "thermophysicalProperties";
        alphaRhoPhiName "alphaRhoPhi";
    }
    
    TCoreOutlet
    {
        type            TBulk;
        libs            ( "libfieldFunctionObjects.so" );
        log             true;
        writeFields     true;
        region          "fluidRegion";
        regionType      faceZone;
        regionName      TcoreOutlet;
        thermoName      "thermophysicalProperties";
        alphaRhoPhiName "alphaRhoPhi";
    }
   
   massFlow1
    {
        type            massFlow;
        libs            ( "libfieldFunctionObjects.so" );
        log             true;
        writeFields     true;
        region          "fluidRegion";
        regionType      faceZone;
        regionName      massFlowSurface_z1;
        
        alphaRhoPhiName "alphaRhoPhi";
        scaleFactor     1;
    }
    
    massFlow2
    {
        type            massFlow;
        libs            ( "libfieldFunctionObjects.so" );
        log             true;
        writeFields     true;
        region          "fluidRegion";
        regionType      faceZone;
        regionName      massFlowSurface_z2;
        
        alphaRhoPhiName "alphaRhoPhi";
        scaleFactor     1;
    }
 } 

libs
(
    externalComm
);

functions
{
    FMUSimulator
    {
        type            FMUSimulator;
        libs            (pyFMUSim);
        pyClassName     momentumSourceTest;
        pyFileName      momentumSourceTest;
    }  
}

// ************************************************************************* //
